'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = function (cepRawValue) {
  return _promiseAny2.default.resolve(cepRawValue).then(validateInputType).then(removeSpecialCharacters).then(validateInputLength).then(leftPadWithZeros).then(fetchCepFromServices).catch(handleServicesError).catch(throwApplicationError);
};

var _correios = require('./services/correios.js');

var _correios2 = _interopRequireDefault(_correios);

var _viacep = require('./services/viacep.js');

var _viacep2 = _interopRequireDefault(_viacep);

var _cepPromise = require('./errors/cep-promise.js');

var _cepPromise2 = _interopRequireDefault(_cepPromise);

var _promiseAny = require('./utils/promise-any.js');

var _promiseAny2 = _interopRequireDefault(_promiseAny);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CEP_SIZE = 8;

function validateInputType(cepRawValue) {
  var cepTypeOf = typeof cepRawValue === 'undefined' ? 'undefined' : _typeof(cepRawValue);

  if (cepTypeOf === 'number' || cepTypeOf === 'string') {
    return cepRawValue;
  }

  throw new _cepPromise2.default({
    message: 'Erro ao inicializar a instância do CepPromise.',
    type: 'validation_error',
    errors: [{
      message: 'Você deve chamar o construtor utilizando uma String ou um Number.',
      service: 'cep_validation'
    }]
  });
}

function removeSpecialCharacters(cepRawValue) {
  return cepRawValue.toString().replace(/\D+/g, '');
}

function leftPadWithZeros(cepCleanValue) {
  return '0'.repeat(CEP_SIZE - cepCleanValue.length) + cepCleanValue;
}

function validateInputLength(cepWithLeftPad) {
  if (cepWithLeftPad.length <= CEP_SIZE) {
    return cepWithLeftPad;
  }

  throw new _cepPromise2.default({
    message: 'CEP deve conter exatamente ' + CEP_SIZE + ' caracteres.',
    type: 'validation_error',
    errors: [{
      message: 'CEP informado possui mais do que ' + CEP_SIZE + ' caracteres.',
      service: 'cep_validation'
    }]
  });
}

function fetchCepFromServices(cepWithLeftPad) {
  return _promiseAny2.default.any([(0, _correios2.default)(cepWithLeftPad), (0, _viacep2.default)(cepWithLeftPad)]);
}

function handleServicesError(aggregatedErrors) {
  if (aggregatedErrors.length !== undefined) {
    throw new _cepPromise2.default({
      message: 'Todos os serviços de CEP retornaram erro.',
      type: 'service_error',
      errors: aggregatedErrors
    });
  }
  throw aggregatedErrors;
}

function throwApplicationError(_ref) {
  var message = _ref.message,
      type = _ref.type,
      errors = _ref.errors;

  throw new _cepPromise2.default({ message: message, type: type, errors: errors });
}
module.exports = exports['default'];